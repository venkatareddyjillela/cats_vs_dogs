# -*- coding: utf-8 -*-
"""Cats_vs_Dogs_Classifier

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dnvpQpD9K9FJS2qDLcZddVumeZhgBxoS
"""

## first create api_token in kaggle
## it downloads json file which contains username and key

## install kaggle
!pip install -q kaggle

# upload json file 
from google.colab import files
files.upload()

#create kaggle folder if not exists
!mkdir ~/.kaggle

#copy json file to created files "kaggle.json"
!cp kaggle.json ~/.kaggle/

### permission for json to work
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets list

## Copy API command from kaggle of required dataset and paste it
!kaggle datasets download -d tongpython/cat-and-dog

!unzip /content/cat-and-dog.zip

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale = 1./255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True
)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/training_set/training_set',
target_size = (64, 64),
batch_size = 32,
class_mode = 'binary')

test_set = test_datagen.flow_from_directory('/content/test_set/test_set',
target_size = (64, 64),
batch_size = 32,
class_mode = 'binary')

model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu',input_shape = [64,64,3]))

model.add(tf.keras.layers.MaxPool2D(pool_size=2,strides =2))

model.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu'))
model.add(tf.keras.layers.MaxPool2D(pool_size=2,strides =2))

model.add(tf.keras.layers.Conv2D(filters=32,kernel_size=3,activation='relu'))
model.add(tf.keras.layers.MaxPool2D(pool_size=2,strides =2))

model.add(tf.keras.layers.Flatten())

model.add(tf.keras.layers.Dense(units = 128,activation='relu'))

model.add(tf.keras.layers.Dense(units = 1,activation='sigmoid'))

model.compile(optimizer='adam',loss = 'binary_crossentropy',metrics=['accuracy'])

history = model.fit(x=training_set,validation_data=test_set,epochs = 50)

training_set.class_indices

import numpy as np
from keras.preprocessing import image
test_image = image.load_img("/content/dog.jpg",target_size=(64,64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image,axis=0)
result = model.predict(test_image)

if result[0][0] == 0:
  prediction = 'cat'
else :
  prediction = 'dog'

prediction

import matplotlib.pyplot as plt
print(history.history.keys())

plt.plot(history.history['accuracy'])